----
12/08/2017 -- Completed tasks:
- Finished serializing the core. This will allow the state of an object from any of the core
classes to be replicated across a server and clients when games are synchronized over the network.
- Created a basic HoloLens game scene (i.e. it is configured so the code can be built properly for
a HoloLens device). This can be used as the starting point for a main menu or game scene, so it
should be convenient to copy-paste this scene instead of reconfiguring one from scratch.
- Created a new GameManager for each of 3 scenarios: single player (not vs. an AI), single player
vs. an AI, and 2-player mode. These are designed to be overridden so users can add whatever game
logic they'd like, and utilize the built-in event systems however they like. Each manager (except
for the 1st of the three) has turn management built in; this pretty much boils down to enabling
inputs if it's your turn, and disabling input otherwise (except you can still at least move and
turn your head in the game world to see what's happening). The single-player non-AI manager is
simple since there's not much we can infer about the game logic (it varies heavily from game to
game) so users can just override it and write it however they want. By default it just subscribes
to a couple key events, Win and Loss, designating the end of the game. The other two managers do
this too, although there are other events (Draw, plus the start of the player's turn and the
start of the enemy's turn).

----
12/01/2017 -- Completed tasks:
- Graphical utilities. Added a script to generate an info bubble for a given player that can
receive and display info (really, attribute-value pairs, e.g. "Player name: James") on separate
lines. Each player's bubble will automatically point at the other player so they can read it, and
this is updated to face the other player each frame, in order to make sure both players can read
each other's info. Each bubble starts at a configurable offset above each player (by default, this
is roughly 0.5m). Each player will have their own bubble (and "generator"). Also added a status
panel to display general game information, to be placed at some fixed place in the scene (and must
be readable by both players). This panel has an associated script that acts like the info bubble,
but it does not change the bubble's position or rotation based on the movement of either player.
- Also began working on serializing the core classes (so we can synchronize their info across
both players' games). This is in place for BasicZone but must be put into the other core classes.
TableauObject.cs now forces each base class to have serialize() and deserialize() before
compilation will work.

----
11/17/2017 -- Completed tasks:
- Reworked general events and NetworkManager to work with the EventManager, e.g. by using string-
named events rather than invoking UnityEvents.
- Discarded the Flow classes since they were unnecessary (NetworkManager has to take care of this
stuff, since it has to work over the network).
- Added a simple turn management mechanism that only allows one player to move at a time, until it
says it's another player's turn. This will happen after a ChangingTurn event is thrown on the
server side, possibly by a legal client action (i.e. ending the player's turn). This is easily
able to be overridden by a subclass of e.g. NetworkManager.
- Separated Player.cs into a Player.cs and CardGamePlayer.cs, as lots of the former file's own code
was specific to a card game scenario.
- Added other classes in the API to the Tableau.Base namespace, or another namespace within it.

----
11/10/2017 -- Completed tasks:
- Created the red and black pieces and the board for the Checkers demo, as well as setup the board
and its different alternating Zones with a script. The zones have colliders by default so they will
interact correctly (physically) with the game pieces and the board itself. All that's left is
implementing the actual rules for the game, which shouldn't take long if the EventManager and other
core classes are well constructed.
- Added a basic HoloLens game scene, so people don't have to keep setting up the scene each time.

----
11/03/2017 -- Completed tasks:
- Spent 4 hours designing and implementing a general game manager and another manager more suited
for turn-based games, as well as several general event types. This will be finished next week. The
final product will be suitable for single- and multi-player environments and will include facilities
to manage "phases" in each turn. Much of the time this week was spent on design and figuring out the
best workflow for API users to implement their own managers for games with different rulesets and
triggers. The resulting architecture will largely be event-driven, with a single game manager
handling lots of these events and doing the necessary bookkeeping in the scene and UI. API users
will be able to implement their own managers by just subclassing a GameManager template and
overriding whatever event handlers they'd like to override.

----
*NOTE: The entry below that describes my progress from 10/20/2017 was overwritten by some prior
commit, so I added that back this week. The actual progress was made, but I didn't get to copy and
paste the entry back here until this week.
----
10/20/2017 -- Completed tasks:
- Created a new Cube prefab for use in the Unity editor. The default Cube essentially shares the
same texture (or, "material") on all sides, which is a problem e.g. if you want to make playing
cards. The new prefab allows for a different material to be used on each side.
- Created a basic playing card prefab as well as a Card script to go with it and handle clicking
events. The prefab is roughly as thin as a playing card and the 4 thin sides have a default white
texture (to represent that these are totally paper-based). A programmer can easily put a different
image on each of the two other sides to create whatever card they want, like a default "back"
texture that gets used on all of the cards in a deck, plus a front side that identifies the card
(e.g. the front side of a "9 of hearts" card). This allows programmers to make cards relatively
easily in the editor.
---> Note: This also marks the completion of the "Easy importing of custom objects" goal, since
other objects (Boards, Pieces, and Zones) have a pretty reasonable workflow. Drag and drop a 3D
model's file into Unity; this model can be from 3rd-party software like Blender. Then drag and drop
the relevant script (Board.cs, Piece.cs, Zone.cs, etc.) onto the new object, and you're done. The
new object will behave according to the script you gave it.
- Fixed a handful of compilation errors and logical errors in the core API.

----
10/13/2017 -- Completed tasks:
- Sizing game objects properly for the HoloLens: Any Board, Zone, or Piece (except for cards) ought
to be no more than 1x1x1 (that is, 1 meter x 1m x 1m), and a warning will be printed to the log for
every object whose renderer/collider's bounds exceed this size in at least 1 dimension.* So
programmers can use these dimensions as a guideline, e.g. make a Board that is at most 1x1 (length
x width) and then scale their zones and pieces to visually fit the board, which basically solves
this problem in the general case. More specific objects may have more restricted sizes, and this
should be implemented as needed; for example, most Cards ought not be more than 0.0889 units tall
and 0.0635 units wide, because standard playing cards are 88.9mm tall and 63.5mm wide, and every 1
meter is 1 unit of distance in Unity.
- Added a general TableauObject class that essentially stands for any physical object that Tableau
uses (usually inheriting from Board, Zone, or Piece). It shouldn't be used for non-physical things
like EventManagers or other classes that work "behind the scenes".

Etc:
- Spent 2 hours testing object sizes at the Interactive Commons, using a real HoloLens they
provided. Also spent 3 hours fixing my development VM after a certain update bricked the machine.

* It might seem weird at first that Pieces and Zones (which are usually smaller than a Board)
share the same size restrictions that a Board has (1x1x1). But some games do have pieces that span
the length or width of the board, as well as extremely tall pieces that serve as a centerpiece for
the board. Anyway, the 1x1x1 is still more of a guideline for sizing everything; players can still
make gigantic boards, pieces, and zones if they want, especially if they want to make life-sized
versions of games like Chess.

----
10/6/2017 -- Completed tasks:
- Refactor core (again) as some existing attributes and behaviors from last week made less sense
this week when considering use cases both in the editor and in an actual created game. In
particular, the two basic Zone implementations were unified into one class; required behaviors were
outlined in the abstract Zone class; and Pieces have been redesigned so they are primarily the ones
who control whether a Zone "owns" them or not (although certain Zone rules, according to game rules
specified by game programmers, may prevent a Piece from "disowning" itself from its Zone.
- Boards, Zones, and Pieces now work with the cursor. That means they can generally be tapped
(analogous to a mouse click), gazed at (hovered over with a mouse cursor) or dragged around in game.
For now, these base classes only have dragging enabled, but subclasses can override this behavior
(future templates will certainly do this, e.g. to play animations and sounds on mouse interactions).
- Any of the above concrete classes (or subclasses) can basically be dragged and dropped onto a
game object, so that that object will behave as the thing attached to it. This is one feature that
will make it easier for devs to import their own boards, game pieces, etc.
- Pieces have also been designed in such a way that they can "just work" by instantiating them in
the Unity editor. By physically placing them above an appropriate Zone (or Board, or the spatial
map (which is just the HoloLens's representation of the physical world)), Pieces will automatically
be associated with the Zone right underneath them. So you don't need to drag and drop them in the
Hierarchy, or add them as an attribute or sub-component. It's as simple as creating them and moving
them where you want them to start when the game loads.

----
9/29/2017 -- First 2 commits (including the commit with this readme). Completed tasks:
- Remove unused classes in core API: Everything other than Board, Zone, and Piece (and Time classes)
will be useless or rendered useless by future commits to the other mentioned core classes.
- Refactor the Board, Zone, and Piece classes: These were simplified so they would only contain
attributes or behaviors (fields/methods) that have a use somewhere in the game creation process,
i.e. need to be able to add a piece to a zone (Zone.AddPiece()) during gameplay, or need to be able
to initialize a board with zones by dragging and dropping in the editor (hence the Board class has a
Zone[] field). There are still other attributes/behaviors that ought to be added but will take more
than a week to finish (say, next week?).

Etc tasks:
- Co-wrote design doc and presentation. Gave presentation in class.
- Added quite a few important todos for the core API on the issue tracker, mostly things not listed
in the schedule in our design doc/presentation.
