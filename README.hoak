----
10/13/2017 -- Completed tasks:
- Sizing game objects properly for the HoloLens: Any Board, Zone, or Piece (except for cards) ought
to be no more than 1x1x1 (that is, 1 meter x 1m x 1m), and a warning will be printed to the log for
every object whose renderer/collider's bounds exceed this size in at least 1 dimension.* So
programmers can use these dimensions as a guideline, e.g. make a Board that is at most 1x1 (length
x width) and then scale their zones and pieces to visually fit the board, which basically solves
this problem in the general case. More specific objects may have more restricted sizes, and this
should be implemented as needed; for example, most Cards ought not be more than 0.0889 units tall
and 0.0635 units wide, because standard playing cards are 88.9mm tall and 63.5mm wide, and every 1
meter is 1 unit of distance in Unity.
- Added a general TableauObject class that essentially stands for any physical object that Tableau
uses (usually inheriting from Board, Zone, or Piece). It shouldn't be used for non-physical things
like EventManagers or other classes that work "behind the scenes".

Etc:
- Spent 2 hours testing object sizes at the Interactive Commons, using a real HoloLens they
provided. Also spent 3 hours fixing my development VM after a certain update bricked the machine.

* It might seem weird at first that Pieces and Zones (which are usually smaller than a Board)
share the same size restrictions that a Board has (1x1x1). But some games do have pieces that span
the length or width of the board, as well as extremely tall pieces that serve as a centerpiece for
the board. Anyway, the 1x1x1 is still more of a guideline for sizing everything; players can still
make gigantic boards, pieces, and zones if they want, especially if they want to make life-sized
versions of games like Chess.

----
10/6/2017 -- Completed tasks:
- Refactor core (again) as some existing attributes and behaviors from last week made less sense
this week when considering use cases both in the editor and in an actual created game. In
particular, the two basic Zone implementations were unified into one class; required behaviors were
outlined in the abstract Zone class; and Pieces have been redesigned so they are primarily the ones
who control whether a Zone "owns" them or not (although certain Zone rules, according to game rules
specified by game programmers, may prevent a Piece from "disowning" itself from its Zone.
- Boards, Zones, and Pieces now work with the cursor. That means they can generally be tapped
(analogous to a mouse click), gazed at (hovered over with a mouse cursor) or dragged around in game.
For now, these base classes only have dragging enabled, but subclasses can override this behavior
(future templates will certainly do this, e.g. to play animations and sounds on mouse interactions).
- Any of the above concrete classes (or subclasses) can basically be dragged and dropped onto a
game object, so that that object will behave as the thing attached to it. This is one feature that
will make it easier for devs to import their own boards, game pieces, etc.
- Pieces have also been designed in such a way that they can "just work" by instantiating them in
the Unity editor. By physically placing them above an appropriate Zone (or Board, or the spatial
map (which is just the HoloLens's representation of the physical world)), Pieces will automatically
be associated with the Zone right underneath them. So you don't need to drag and drop them in the
Hierarchy, or add them as an attribute or sub-component. It's as simple as creating them and moving
them where you want them to start when the game loads.

----
9/29/2017 -- First 2 commits (including the commit with this readme). Completed tasks:
- Remove unused classes in core API: Everything other than Board, Zone, and Piece (and Time classes)
will be useless or rendered useless by future commits to the other mentioned core classes.
- Refactor the Board, Zone, and Piece classes: These were simplified so they would only contain
attributes or behaviors (fields/methods) that have a use somewhere in the game creation process,
i.e. need to be able to add a piece to a zone (Zone.AddPiece()) during gameplay, or need to be able
to initialize a board with zones by dragging and dropping in the editor (hence the Board class has a
Zone[] field). There are still other attributes/behaviors that ought to be added but will take more
than a week to finish (say, next week?).

Etc tasks:
- Co-wrote design doc and presentation. Gave presentation in class.
- Added quite a few important todos for the core API on the issue tracker, mostly things not listed
in the schedule in our design doc/presentation.
